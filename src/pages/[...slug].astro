---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import Prose from '../components/Prose.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import FormattedDate from '../components/FormattedDate.astro';
import AboutTheAuthor from '../components/widgets/AboutTheAuthor.astro';
import TableOfContent from '../components/widgets/TableOfContent.astro';
import { Image } from 'astro:assets';
import { slugify } from '../utils';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post
	}));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content, headings } = await post.render();

const { title, description, pubDate, updatedDate, coverImage, tags } = post.data;
---

<BaseLayout title={title} description={description}>
	<div class='container py-16 md:py-24 animate-fade-in'>
		<article class='max-w-4xl mx-auto'>
			<!-- Header -->
			<header class='mb-10 text-center'>
				{
					tags && tags.length > 0 && (
						<div class='flex flex-wrap justify-center gap-2 mb-4'>
							{tags.map((tag) => (
								<a
									href={`/tags/${slugify(tag)}/`}
									class='px-3 py-1 text-sm font-medium rounded-full bg-primary-100 dark:bg-primary-900/30 text-primary-800 dark:text-primary-300 hover:bg-primary-200 dark:hover:bg-primary-800/40 transition-colors'>
									{tag}
								</a>
							))}
						</div>
					)
				}

				<h1 class='text-4xl md:text-5xl font-bold mb-6'>{title}</h1>

				<div class='flex items-center justify-center gap-4 text-gray-600 dark:text-gray-400 text-sm'>
					<div class='flex items-center gap-1.5'>
						<svg
							xmlns='http://www.w3.org/2000/svg'
							width='18'
							height='18'
							viewBox='0 0 24 24'
							fill='none'
							stroke='currentColor'
							stroke-width='2'
							stroke-linecap='round'
							stroke-linejoin='round'
							><rect width='18' height='18' x='3' y='4' rx='2' ry='2'></rect><line x1='16' x2='16' y1='2' y2='6'></line><line
								x1='8'
								x2='8'
								y1='2'
								y2='6'></line><line x1='3' x2='21' y1='10' y2='10'></line><path d='M8 14h.01'></path><path d='M12 14h.01'></path><path
								d='M16 14h.01'></path><path d='M8 18h.01'></path><path d='M12 18h.01'></path><path d='M16 18h.01'></path></svg
						>
						<FormattedDate date={pubDate} />
					</div>

					{
						updatedDate && (
							<div class='flex items-center gap-1.5'>
								<svg
									xmlns='http://www.w3.org/2000/svg'
									width='18'
									height='18'
									viewBox='0 0 24 24'
									fill='none'
									stroke='currentColor'
									stroke-width='2'
									stroke-linecap='round'
									stroke-linejoin='round'>
									<path d='M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8' />
									<path d='M3 3v5h5' />
									<path d='M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16' />
									<path d='M16 16h5v5' />
								</svg>
								<span>
									Updated: <FormattedDate date={updatedDate} />
								</span>
							</div>
						)
					}
				</div>
			</header>

			{
				coverImage && (
					<div class='mb-10 rounded-2xl overflow-hidden shadow-md'>
						<Image src={coverImage} alt={title} width={1200} height={630} class='w-full h-auto object-cover' />
					</div>
				)
			}

			<div class='grid grid-cols-1 lg:grid-cols-12 gap-10'>
				<!-- Main Content -->
				<div class='lg:col-span-8'>
					<div class='bg-white dark:bg-dark-100 rounded-2xl shadow-sm border border-gray-200 dark:border-gray-800 p-8'>
						<Prose>
							<Content />
						</Prose>
					</div>

					<!-- Comments Section -->
					{
						import.meta.env.GISCUS_REPO && import.meta.env.GISCUS_REPO_ID && (
							<div class='mt-10 bg-white dark:bg-dark-100 rounded-2xl shadow-sm border border-gray-200 dark:border-gray-800 p-8'>
								<h2 class='text-2xl font-bold mb-6'>Comments</h2>
								<script
									src='https://giscus.app/client.js'
									data-repo={import.meta.env.GISCUS_REPO}
									data-repo-id={import.meta.env.GISCUS_REPO_ID}
									data-category={import.meta.env.GISCUS_CATEGORY}
									data-category-id={import.meta.env.GISCUS_CATEGORY_ID}
									data-mapping='pathname'
									data-strict='0'
									data-reactions-enabled='1'
									data-emit-metadata='0'
									data-input-position='top'
									data-theme='preferred_color_scheme'
									data-lang='en'
									data-loading='lazy'
									crossorigin='anonymous'
									async
								/>
							</div>
						)
					}
				</div>

				<!-- Sidebar -->
				<aside class='lg:col-span-4 space-y-6'>
					<div class='bg-white dark:bg-dark-100 rounded-2xl shadow-sm border border-gray-200 dark:border-gray-800 p-6 sticky top-24'>
						<AboutTheAuthor />

						{
							headings.length > 0 && (
								<div class='mt-8'>
									<TableOfContent headings={headings} />
								</div>
							)
						}

						<div class='mt-8'>
							<h3 class='text-lg font-bold mb-4'>Share this post</h3>
							<div class='flex gap-2'>
								<a
									href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(Astro.url.href)}`}
									target='_blank'
									rel='noopener noreferrer'
									class='p-2 rounded-full bg-gray-100 dark:bg-dark-200 text-gray-700 dark:text-gray-300 hover:bg-primary-100 dark:hover:bg-primary-900/30 hover:text-primary-600 dark:hover:text-primary-400 transition-colors'
									aria-label='Share on Twitter'
								>
									<svg
										xmlns='http://www.w3.org/2000/svg'
										width='20'
										height='20'
										viewBox='0 0 24 24'
										fill='none'
										stroke='currentColor'
										stroke-width='2'
										stroke-linecap='round'
										stroke-linejoin='round'
										><path
											d='M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z'
										></path></svg
									>
								</a>
								<a
									href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(Astro.url.href)}`}
									target='_blank'
									rel='noopener noreferrer'
									class='p-2 rounded-full bg-gray-100 dark:bg-dark-200 text-gray-700 dark:text-gray-300 hover:bg-primary-100 dark:hover:bg-primary-900/30 hover:text-primary-600 dark:hover:text-primary-400 transition-colors'
									aria-label='Share on LinkedIn'
								>
									<svg
										xmlns='http://www.w3.org/2000/svg'
										width='20'
										height='20'
										viewBox='0 0 24 24'
										fill='none'
										stroke='currentColor'
										stroke-width='2'
										stroke-linecap='round'
										stroke-linejoin='round'
										><path d='M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z'></path><rect
											width='4'
											height='12'
											x='2'
											y='9'></rect><circle cx='4' cy='4' r='2'></circle></svg
									>
								</a>
								<a
									href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(Astro.url.href)}`}
									target='_blank'
									rel='noopener noreferrer'
									class='p-2 rounded-full bg-gray-100 dark:bg-dark-200 text-gray-700 dark:text-gray-300 hover:bg-primary-100 dark:hover:bg-primary-900/30 hover:text-primary-600 dark:hover:text-primary-400 transition-colors'
									aria-label='Share on Facebook'
								>
									<svg
										xmlns='http://www.w3.org/2000/svg'
										width='20'
										height='20'
										viewBox='0 0 24 24'
										fill='none'
										stroke='currentColor'
										stroke-width='2'
										stroke-linecap='round'
										stroke-linejoin='round'><path d='M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z'></path></svg
									>
								</a>
							</div>
						</div>
					</div>
				</aside>
			</div>
		</article>
	</div>
</BaseLayout>

<script async is:inline>
	const anchors = document.querySelectorAll('.prose h2[id], .prose h3[id]');
	const links = document.querySelectorAll('nav.toc ul li a');

	function observeToc() {
		if (typeof anchors != 'undefined' && anchors != null && typeof links != 'undefined' && links != null) {
			let scrollTop = window.scrollY;

			// highlight the last scrolled-to: set everything inactive first
			for (const link of links) {
				link.classList.add('border-transparent', 'text-inherit');
				link.classList.remove('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
			}
			// then iterate backwards, on the first match highlight it and break
			for (var i = anchors.length - 1; i >= 0; i--) {
				if (scrollTop > anchors[i].offsetTop - 80) {
					links[i].classList.remove('border-transparent', 'text-inherit');
					links[i].classList.add('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
					break;
				}
			}
		}
	}

	window.addEventListener('scroll', (event) => {
		observeToc(event);
	});
	window.addEventListener('hashchange', (event) => {
		observeToc(event);
	});
</script>
